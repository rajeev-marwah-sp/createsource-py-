<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2024-01-22 22:51:56">
<sys_script_include action="INSERT_OR_UPDATE">
<access>package_private</access>
<active>true</active>
<api_name>x_sap_intidn.SP_SPNT_SNOW_INT_ApprovalsREST</api_name>
<caller_access/>
<client_callable>false</client_callable>
<description>A script include that contains methods used for approval functionality</description>
<name>SP_SPNT_SNOW_INT_ApprovalsREST</name>
<script><![CDATA[var SP_SPNT_SNOW_INT_ApprovalsREST = Class.create();

SP_SPNT_SNOW_INT_ApprovalsREST.prototype = Object.extendsObject(SP_SPNT_SNOW_INT_Common, {

    initialize: function() {},

    /* 
    	Fetching pending approvals for given user
    	Params:
    		[required] accessToken  
    		[required] requestedFor: system id of the IDN user
    	
    	Returns: Object
    		'items': array of  objects 
    */
    getPendingApprovalsForUser: function(accessToken, requestedFor) {


        var request = this.createHttpRequest('GET', 'pending-access-request-approvals', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });
        //request.setQueryParameter("filters", "requestedFor.id eq " + "\"" + requestedFor + "\"");

        var response = request.execute();
        var responseBody = response.getBody();

        return global.JSON.parse(responseBody);

    },

    /* 
    Fetching pending approvals for given user
    Params:
    	[required] accessToken  
    	[required] requestedFor: system id of requestedFor in IDN
    	[required] requestedObject: system id of the requested Role, Access Profile or Entitlement in IDN
    	[required] requestType: GRANT_ACCESS or REMOVE_ACCESS

    Returns: Object
    	'items': array of  objects 
    */
    getPendingApprovalsForRequestedObject: function(accessToken, requestedFor, requestedObject, requestType) {

        var request = this.createHttpRequest('GET', 'pending-access-request-approvals', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });
        request.setQueryParameter("filters", "requestedFor.id eq " + "\"" + requestedFor + "\"");

        var response = request.execute();
        var responseBody = response.getBody();

        //return global.JSON.parse(responseBody);

        //TODO:
        // filter by requestedObject & requestType & requester 
        // the Apprver is the Owner
        var result = [];
        global.JSON.parse(responseBody).forEach(function(arrayItem) {
            if (arrayItem.requestedFor.id == requestedFor &&
                arrayItem.requestedObject.id == requestedObject &&
                arrayItem.requestType == requestType) {
                result.push(arrayItem);
            }
        });
        return result;
        //return global.JSON.parse(responseBody);
    },
    getCompletedApprovalsForRequestedObject: function(accessToken, appID) {

        var request = this.createHttpRequest('GET', 'list-completed-approvals', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });
        request.setQueryParameter("filters", "requestedFor.id eq " + "\"" + appID + "\"");

        var response = request.execute();
        var responseBody = response.getBody();

        //return global.JSON.parse(responseBody);

        //TODO:
        // filter by requestedObject & requestType & requester 
        // the Apprver is the Owner
        //var result = [];
        // 		global.JSON.parse(responseBody).forEach(function(arrayItem) {
        // 		    if (arrayItem.requestedFor.id == requestedFor && 
        // 				arrayItem.requestedObject.id == requestedObject && 
        // 				arrayItem.requestType == requestType){
        // 			result.push(arrayItem);
        // 			}
        // 		});
        //return result;
        return global.JSON.parse(responseBody);
    },

    /* 
    	Fetching pending approvals for given user
    	Params:
    		[required] accessToken  
    		[required] approvalId: system id of the IDN approval entry
    		[required] approver: the IDN approver object -> part of the response of getPendingApprovalsForRequestedObject()
    		[required] ritmSysId: the sys_id of the current RITM
    	
    	Returns: void
    */
    approveAccessRequest: function(approvalId, approver, ritmSysId) {
        var accessToken = this.authScript.getServiceAccountAccessToken();
        var request = this.createHttpRequest('POST', '', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });

        var snApprovalRecord = this._getSNApprovalRecordDetails(ritmSysId);

        var actionUrl = this.getEndpointUrl('approveAccessRequest');
        request.setEndpoint(actionUrl.replace('%approvalId%', approvalId));

        var payload = {
            comment: snApprovalRecord.comments,
            author: approver,
            created: new Date()
        };

        request.setRequestBody(global.JSON.stringify(payload));

        request.execute();
        //add error handling
    },

    /* 
    	Fetching pending approvals for given user
    	Params:
    		[required] accessToken  
    		[required] approvalId: system id of the IDN approval entry
    		[required] approver: the IDN approver object -> part of the response of getPendingApprovalsForRequestedObject()
    		[required] ritmSysId: the sys_id of the current RITM
    	
    	Returns: void
    		
    */
    rejectAccessRequest: function(approvalId, approver, ritmSysId) {
        var accessToken = this.authScript.getServiceAccountAccessToken();
        var request = this.createHttpRequest('POST', '', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });

        var snApprovalRecord = this._getSNApprovalRecordDetails(ritmSysId);

        var actionUrl = this.getEndpointUrl('rejectAccessRequest');
        request.setEndpoint(actionUrl.replace('%approvalId%', approvalId));

        var payload = {
            comment: snApprovalRecord.comments,
            author: approver,
            created: new Date()
        };

        request.setRequestBody(global.JSON.stringify(payload));

        request.execute();
        //add error handling

    },


    /* 
	Fetching identity details related to provided owner id
	Params:
		[required] ownerId  
	
	Returns: Object
		'items': array of  objects 
*/
    getOwnerIdentity: function(ownerId) {

        var accessToken, identityAttributeName, request, requestBody, response, responseBody;

        accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();
        identityAttributeName = gs.getProperty('x_sap_intidn.x_sp_spnt_snow_int.spnt_identity_attribute', '').trim();
        request = this.createHttpRequest('POST', 'genericSearch', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });

        requestBody = {
            indices: ["identities"],
            includeNested: true,
            query: {
                query: 'id:"' + ownerId + '"'
            },
            queryResultFilter: {
                includes: [identityAttributeName, "id", "name"]
            }
        };

        request.setRequestBody(JSON.stringify(requestBody));
        response = request.execute();
        responseBody = response.getBody();
        return global.JSON.parse(responseBody);
    },

    getOwnerIdentityV3: function(ownerId) {
        var accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();

        var request = this.createHttpRequest('GET', 'getIdentity', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });
        request.setQueryParameter("filters", "id eq " + "\"" + ownerId + "\"");


        var response = request.execute();
        var responseBody = response.getBody();


        return global.JSON.parse(responseBody);
    },


    getAccessObjectOwner: function(accessObjectId, accessObjectType, ritmId) {
        var SNOwnerSysId = null;
        var accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();
        var accessListScript = new x_sap_intidn.SP_SPNT_SNOW_INT_GetAccessListREST();
        var query = 'id:' + accessObjectId;

        var accessObject = accessListScript.getAccessEntitiesCombined(accessToken, query, accessObjectType);
        if (accessObject.count > 0) {
            var accessOwnerObject = this.getOwnerIdentity(accessObject.items[0].OwnerObject.id);
            SNOwnerSysId = this._findSNUserBasedOnIDNIdentity(accessOwnerObject); //v2update

        } else {
            var workNoteMsg = "Тhe access object does not have an owner assigned in the IDN system.";
            var grScReqItem = new GlideRecord('sc_req_item');
            if (grScReqItem.get(ritmId)) {
                grScReqItem.work_notes = workNoteMsg;
                grScReqItem.update();
            }
        }

        return SNOwnerSysId;

    },

    getIDNUserManager: function(idnUserId, ritmId) {
        var userHasNoManager = false;
        var serviceNowUser = null;

        var idnUser = this.getOwnerIdentityV3(idnUserId);

        if (idnUser.length > 0) {

            var idnManagerId = null;
            if (idnUser[0].manager) {
                idnManagerId = idnUser[0].manager.id;

                var idnManager = this.getOwnerIdentity(idnManagerId);
                if (idnManager.length > 0) {
                    serviceNowUser = this._findSNUserBasedOnIDNIdentity(idnManager); //v2 update
                } else {
                    userHasNoManager = true;
                }
            } else {
                userHasNoManager = true;
            }

        } else {
            userHasNoManager = true;
        }
        if (userHasNoManager) {
            var workNoteMsg = "Тhe User does not have an manager assigned in the IDN system.";
            var grScReqItem = new GlideRecord('sc_req_item');
            if (grScReqItem.get(ritmId)) {
                grScReqItem.work_notes = workNoteMsg;
                grScReqItem.update();
            }
        }

        return serviceNowUser;
    },

    getSNGovernanceGroupMembersByName: function(governanceGroupName) {

        var accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();

        var servicenowUsers = [];

        var governanceGroups = this.getAllGovernanceGroups(accessToken);

        var governanceGroupId = null;

        for (var i = 0; i < governanceGroups.length; i++) {
            if (governanceGroups[i].name === governanceGroupName) {
                governanceGroupId = governanceGroups[i].id;
                break;
            }
        }

        if (governanceGroupId) {

            var idnIdentities = this.getGovernanceGroupMembersById(accessToken, governanceGroupId);
            for (var i = 0; i < idnIdentities.length; i++) {
                var memberIdentity = this.getOwnerIdentity(idnIdentities[i].id);
                var snuser = this._findSNUserBasedOnIDNIdentity(memberIdentity); //v2 update
                if (snuser) {
                    servicenowUsers.push(snuser);
                }

                //else reject ?
            }
        }
        return servicenowUsers;
    },


    //TODO: add method annotations about the parameters and return type
    getGovernanceGroupMembersById: function(accessToken, governanceGroupId) {

        var idnIdentities = [];

        var request = this.createHttpRequest('GET', '', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });

        var actionUrl = this.getEndpointUrl('getGovernanceGroupMembersById');
        request.setEndpoint(actionUrl.replace('%groupId%', governanceGroupId));

        var response = request.execute();
        var responseBody = response.getBody();

        idnIdentities = global.JSON.parse(responseBody);

        return idnIdentities;
    },

    //TODO: add method annotations about the parameters and return type
    getAllGovernanceGroups: function(accessToken) {

        var idnGovernanceGroups = [];

        var request = this.createHttpRequest('GET', 'getAllGovernanceGroups', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });
        var response = request.execute();
        var responseBody = response.getBody();

        idnGovernanceGroups = global.JSON.parse(responseBody);

        return idnGovernanceGroups;
    },


    //------- PRIVATE FUNCTIONS -------


    _findSNUserBasedOnIDNIdentity: function(IDNIdentity) {

        var user = null;

        var grUser = new GlideRecord('sys_user');
        //grUser.addQuery(gs.getProperty('x_sap_intidn.x_sp_spnt_snow_int.servicenow_account_attribute'), IDNIdentity[0][gs.getProperty('x_sap_intidn.x_sp_spnt_snow_int.spnt_identity_attribute')]);
        grUser.addQuery(gs.getProperty('x_sap_intidn.x_sp_spnt_snow_int.servicenow_account_attribute'), this._lookupV2object(IDNIdentity, gs.getProperty('x_sap_intidn.x_sp_spnt_snow_int.spnt_identity_attribute')));
        grUser.setLimit(1);
        grUser.query();

        if (grUser.next()) {
            user = grUser.getValue('sys_id');
        } else {
            //add to activiy log if no user
        }

        return user;
    },

    _getSNApprovalRecordDetails: function(ritmSysId) {

        var result = {};
        var gr = new GlideRecord('sysapproval_approver');
        gr.addQuery('sysapproval', ritmSysId);
        gr.orderByDesc('sys_updated_on');
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            result.approverId = gr.getValue('approver');
            result.comments = gr.comments.getJournalEntry(1); // concider returning the whole list 
        }
        return result;
    },

    getAccessRequestConfigFromIDN: function() {
        try {
            var accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();
            var request = this.createHttpRequest('GET', 'getAccessRequestConfig', {
                headers: {
                    Authorization: 'Bearer ' + accessToken
                }
            });
            var response = request.execute();
            var result = JSON.parse(response.getBody());
            return result;
        } catch (ex) {
            gs.error('Error when trying to get Access Request Config: ' + ex.message);
            return '';
        }
    },

    getIdentity: function(queryParameter, queryParameterValue) {

        var accessToken, request, response, requestBody, responseBody;

        accessToken = new x_sap_intidn.SP_SPNT_SNOW_INT_Auth().getServiceAccountAccessToken();

        request = this.createHttpRequest('POST', 'genericSearch', {
            headers: {
                Authorization: 'Bearer ' + accessToken
            }
        });

        requestBody = {
            indices: ["identities"],
            includeNested: true,
            query: {
                query: queryParameter + ':"' + queryParameterValue + '"'
            },
            queryResultFilter: {
                includes: ["id", "manager", "name", "attributes"]
            }
        };

        request.setRequestBody(JSON.stringify(requestBody));
        response = request.execute();
        responseBody = response.getBody();


        return global.JSON.parse(responseBody);
    },


    type: 'SP_SPNT_SNOW_INT_ApprovalsREST'
});]]></script>
<sys_class_name>sys_script_include</sys_class_name>
<sys_created_by>boris.nenchev</sys_created_by>
<sys_created_on>2022-10-25 04:53:24</sys_created_on>
<sys_id>d737aef81b7a111075fbeb16624bcbba</sys_id>
<sys_mod_count>16</sys_mod_count>
<sys_name>SP_SPNT_SNOW_INT_ApprovalsREST</sys_name>
<sys_package display_value="SailPoint IdN for Service Catalog" source="x_sap_intidn">05256761db3200106388f53a2996192b</sys_package>
<sys_policy/>
<sys_scope display_value="SailPoint IdN for Service Catalog">05256761db3200106388f53a2996192b</sys_scope>
<sys_update_name>sys_script_include_d737aef81b7a111075fbeb16624bcbba</sys_update_name>
<sys_updated_by>mandar.kamtekar</sys_updated_by>
<sys_updated_on>2023-11-23 09:12:58</sys_updated_on>
</sys_script_include>
</unload>
